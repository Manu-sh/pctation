#include <cpu/instruction.hpp>

#if defined(OPCODE) && !defined(OPCODE_PRIM) && !defined(OPCODE_SEC) && !defined(OPCODE_COP)
  #define OPCODE_PRIM OPCODE
  #define OPCODE_SEC OPCODE
  #define OPCODE_COP OPCODE
#endif

#ifndef OPCODE_PRIM
  #define OPCODE_PRIM(mnemonic, opcode, operand1, operand2, operand3)
#endif

#ifndef OPCODE_SEC
  #define OPCODE_SEC(mnemonic, opcode, operand1, operand2, operand3)
#endif

#ifndef OPCODE_COP
  #define OPCODE_COP(mnemonic, opcode, operand1, operand2, operand3)
#endif

// For brevity
#define NONE OPERAND_NONE
#define RS OPERAND_RS
#define RT OPERAND_RT
#define RD OPERAND_RD
#define IMM5 OPERAND_IMM5
#define IMM16 OPERAND_IMM16
#define IMM20 OPERAND_IMM20
#define IMM25 OPERAND_IMM25
#define IMM26 OPERAND_IMM26
#define GTE_REG OPERAND_GTE_REG
#define GTE_GD OPERAND_GTE_GD
#define GTE_GC OPERAND_GTE_GC

//      (mnemonic, opcode, operand1, operand2, operand3)

OPCODE_PRIM(SPECIAL,  0x00,  NONE,  NONE,  NONE)
OPCODE_PRIM(ADDI,     0x08,    RT,    RS, IMM16)
OPCODE_PRIM(LB,       0x20,    RT, IMM16,    RS)
OPCODE_PRIM(SB,       0x28,    RT, IMM16,    RS)
OPCODE_PRIM(BCONDZ,   0x01,  NONE,  NONE,  NONE)
OPCODE_PRIM(ADDIU,    0x09,    RT,    RS, IMM16)
OPCODE_PRIM(LH,       0x21,    RT, IMM16,    RS)
OPCODE_PRIM(SH,       0x29,    RT, IMM16,    RS)
OPCODE_PRIM(J,        0x02, IMM26,  NONE,  NONE)
OPCODE_PRIM(SLTI,     0x0A,    RT,    RS, IMM16)
OPCODE_PRIM(LWL,      0x22,    RT, IMM16,    RS)
OPCODE_PRIM(SWL,      0x2A,    RT, IMM16,    RS)
OPCODE_PRIM(LWC2,     0x32,    RS,GTE_REG,IMM16) // COP2 instruction
OPCODE_PRIM(SWC2,     0x3A,    RS,GTE_REG,IMM16) // COP2 instruction
OPCODE_PRIM(JAL,      0x03, IMM26,  NONE,  NONE)
OPCODE_PRIM(SLTIU,    0x0B,    RT,    RS, IMM16)
OPCODE_PRIM(LW,       0x23,    RT, IMM16,    RS)
OPCODE_PRIM(SW,       0x2B,    RT, IMM16,    RS)
OPCODE_PRIM(BEQ,      0x04,    RS,    RT, IMM16)
OPCODE_PRIM(ANDI,     0x0C,    RT,    RS, IMM16)
OPCODE_PRIM(LBU,      0x24,    RT, IMM16,    RS)
OPCODE_PRIM(BNE,      0x05,    RS,    RT, IMM16)
OPCODE_PRIM(ORI,      0x0D,    RT,    RS, IMM16)
OPCODE_PRIM(LHU,      0x25,    RT, IMM16,    RS)
OPCODE_PRIM(BLEZ,     0x06,    RS, IMM16,  NONE)
OPCODE_PRIM(XORI,     0x0E,    RT,    RS, IMM16)
OPCODE_PRIM(LWR,      0x26,    RT, IMM16,    RS)
OPCODE_PRIM(SWR,      0x2E,    RT, IMM16,    RS)
OPCODE_PRIM(BGTZ,     0x07,    RS, IMM16,  NONE)
OPCODE_PRIM(LUI,      0x0F,    RT, IMM16,  NONE)

OPCODE_SEC(SLL,       0x00,    RD,    RT,  IMM5)
OPCODE_SEC(JR,        0x08,    RS,  NONE,  NONE)
OPCODE_SEC(MFHI,      0x10,    RD,  NONE,  NONE)
OPCODE_SEC(MULT,      0x18,    RS,    RT,  NONE)
OPCODE_SEC(ADD,       0x20,    RD,    RS,    RT)
OPCODE_SEC(JALR,      0x09,    RD,    RS,  NONE)
OPCODE_SEC(MTHI,      0x11,    RS,  NONE,  NONE)
OPCODE_SEC(MULTU,     0x19,    RS,    RT,  NONE)
OPCODE_SEC(ADDU,      0x21,    RD,    RS,    RT)
OPCODE_SEC(SRL,       0x02,    RD,    RT,  IMM5)
OPCODE_SEC(MFLO,      0x12,    RD,  NONE,  NONE)
OPCODE_SEC(DIV,       0x1A,    RS,    RT,  NONE)
OPCODE_SEC(SUB,       0x22,    RD,    RS,    RT)
OPCODE_SEC(SLT,       0x2A,    RD,    RS,    RT)
OPCODE_SEC(SRA,       0x03,    RD,    RT,  IMM5)
OPCODE_SEC(MTLO,      0x13,    RS,  NONE,  NONE)
OPCODE_SEC(DIVU,      0x1B,    RS,    RT,  NONE)
OPCODE_SEC(SUBU,      0x23,    RD,    RS,    RT)
OPCODE_SEC(SLTU,      0x2B,    RD,    RS,    RT)
OPCODE_SEC(SLLV,      0x04,    RD,    RT,    RS)
OPCODE_SEC(SYSCALL,   0x0C, IMM20,  NONE,  NONE)
OPCODE_SEC(AND,       0x24,    RD,    RS,    RT)
OPCODE_SEC(BREAK,     0x0D, IMM20,  NONE,  NONE)
OPCODE_SEC(OR,        0x25,    RD,    RS,    RT)
OPCODE_SEC(SRLV,      0x06,  NONE,  NONE,  NONE)
OPCODE_SEC(XOR,       0x26,    RD,    RS,    RT)
OPCODE_SEC(SRAV,      0x07,  NONE,  NONE,  NONE)
OPCODE_SEC(NOR,       0x27,    RD,    RS,    RT)

// COP0 instructions
OPCODE_COP(MFC0,  0b010000'0'0000,    RT,   RD, NONE)
OPCODE_COP(CFC0,  0b010000'0'0010,    RT,   RD, NONE)
OPCODE_COP(MTC0,  0b010000'0'0100,    RT,   RD, NONE)
OPCODE_COP(CTC0,  0b010000'0'0110,    RT,   RD, NONE)
OPCODE_COP(COP2,  0,                NONE, NONE, NONE) // Manually matched
// Could actually be any COP0 instruction, but RFE's the only one implemented
// on PlayStation hardware with this encoding
OPCODE_COP(RFE,   0b010000'1'0000,  NONE, NONE, NONE)

// COP2 (Geometry Transformation Engine) instructions
OPCODE_COP(MFC2, 0b010010'0'0000, RT, GTE_GD, NONE)
OPCODE_COP(CFC2, 0b010010'0'0010, RT, GTE_GC, NONE)
OPCODE_COP(MTC2, 0b010010'0'0100, RT, GTE_GD, NONE)
OPCODE_COP(CTC2, 0b010010'0'0110, RT, GTE_GC, NONE)
OPCODE_COP(BC2,  0b010010'1'1000, IMM16, NONE, NONE)


#undef NONE
#undef RS
#undef RT
#undef RD
#undef IMM5
#undef IMM16
#undef IMM20
#undef IMM25
#undef IMM26
#undef GTE_REG
#undef GTE_GD
#undef GTE_GC

#undef OPCODE_PRIM
#undef OPCODE_SEC
#undef OPCODE_COP
#undef OPCODE
